% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/ep_cox_boot.R
\name{exceedProbCoxBoot}
\alias{exceedProbCoxBoot}
\title{Bootstrap confidence intervals for the exceedance probability of Cox model parameters}
\usage{
exceedProbCoxBoot(data, cox_fit, j, alpha, R, cutoff = NULL, m = NULL,
  lower_tail = FALSE, sim = "model")
}
\arguments{
\item{data}{survival data (data.frame)}

\item{cox_fit}{(coxph.object) A fitted Cox model}

\item{j}{Index of parameter for which the exceedance probability is obtained}

\item{alpha}{Significance level}

\item{R}{Number of bootstrap resamples}

\item{cutoff}{Cutoff values (scalar or vector if supplied, otherwise set to +/- 0.5 of theta_hat)}

\item{m}{Number of observations in the replication study (defaults to n if NULL)}

\item{lower_tail}{If TRUE, reports lower tail probabilities; otherwise reports upper tail probabilities}

\item{sim}{type of simulation, input to boot::censboot}
}
\value{
ep Exceedance probability with confidence intervals
}
\description{
This function obtains nonparametric bootstrap percentile confidence for Cox model parameters.
Beta version.
}
\examples{
library(exceedProb)
library(survival)

# Cox model -------------------------------------------------------

# Simulate exponential data
n <- 50
baseline_hazard <- 1
theta <- 0.4
p_censor <- 0.3
prop_tx <- 0.5

tx_indicator = rbinom(n = n, size = 1, prob = prop_tx)
event_rate <- baseline_hazard * exp(theta * tx_indicator)
censor_rate <- event_rate * p_censor / (1 - p_censor)

event_time <- rexp(n = n, rate = event_rate)
censor_time <- rexp(n = n, rate = censor_rate)
time <- pmin(event_time, censor_time)
event <- time == event_time
surv_data = data.frame(time = time, event = event, group = tx_indicator)

# Fit Cox model and get bootstrap percentile confidence intervals for the exceedance probability 
# with model-based resampling (see documentation for boot::censboot)
cox_fit <- coxph(Surv(time, event) ~ group, data = surv_data)
ep <- exceedProbCoxBoot(data = surv_data,
                        cox_fit = cox_fit,
                        j = 1, 
                        alpha = 0.05, 
                        R = 500)

# Plot results
with(ep, plot(cutoff, point, type = "l"))
with(ep, lines(cutoff, lower, lty = 2))
with(ep, lines(cutoff, upper, lty = 2))
}
